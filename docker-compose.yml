version: "3.8"

services:
  auth-api:
    container_name: auth-api
    build:
      context: ./backend/auth
    ports:
      - "5000:5000"
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://auth-db:27017/auth
      JWT_SECRET: FzQ7U1aZ+zU5rLJ9cW4qEKe45Ihv8+6BqZVh4TcI1xQ=
    depends_on: 
      auth-db:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network

  auth-db:
    container_name: auth-db
    image: mongo:6
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
      - ./backend/auth/docker/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - app-network

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: "-rabbitmq_management load_definitions \"/etc/rabbitmq/definitions.json\""
    volumes:
      - ./rabbitmq-definitions.json:/etc/rabbitmq/definitions.json:ro
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network
      
  gateway:
    container_name: gateway
    build:
      context: ./backend/gateway
    ports:
      - "3000:3000"
    environment:
      JWT_SECRET: FzQ7U1aZ+zU5rLJ9cW4qEKe45Ihv8+6BqZVh4TcI1xQ=
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672
    depends_on:
      rabbitmq:
        condition: service_healthy
      auth-api:
        condition: service_started
    networks:
      - app-network

  # Banco PostgreSQL Ãºnico com schemas separados
  postgres-db:
    container_name: postgres-db
    image: postgres:16
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  clients:
    container_name: clients
    build:
      context: ./backend/clients
    ports:
      - "5001:5001"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:5432/postgres?currentSchema=client
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
    depends_on:
      postgres-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network

  booking-command-service:
    build: ./backend/BookingService/bookingcommand
    container_name: booking_command_service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:5432/postgres?currentSchema=bookingcommand
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
    ports:
      - "5004:5004"
    depends_on:
      postgres-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network

  booking-query-service:
    build: ./backend/BookingService/bookingquery
    container_name: booking_query_service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:5432/postgres?currentSchema=bookingquery
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
    ports:
      - "5006:5006"
    depends_on:
      postgres-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network

  flight-service:
    build: ./backend/FlightService/flight
    container_name: flight_service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:5432/postgres?currentSchema=flight
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
    ports:
      - "5003:5003"
    depends_on:
      postgres-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network

  employee-service:
    build: ./backend/EmployeeService/ProjetoFuncionario
    container_name: employee_service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:5432/postgres?currentSchema=employee
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
    ports:
      - "5002:5002"
    depends_on:
      postgres-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network

  orchestrator:
    build: ./backend/OrchestratorService/orchestrator
    container_name: orchestrator
    environment:
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
    ports:
      - "5005:5005"
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  mongo-data:
  postgres-data: