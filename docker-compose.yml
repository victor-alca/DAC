version: "3.8"

services:
  auth-api:
    container_name: auth-api
    build:
      context: ./backend/auth
    ports:
      - "5000:5000"
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://auth-db:27017/auth
      JWT_SECRET: FzQ7U1aZ+zU5rLJ9cW4qEKe45Ihv8+6BqZVh4TcI1xQ=
    depends_on: 
      auth-db:
        condition: service_started
      rabbitmq:
        condition: service_started
  

  auth-db:
    container_name: auth-db
    image: mongo:6
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
      - ./backend/auth/docker/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro

  #front-end:
    #container_name: front-end
    #build:
    #  context: ./
    #ports:
    #  - "4200:80"

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    ports:
      - "5672:5672"     # AMQP protocol
      - "15672:15672"   # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: "-rabbitmq_management load_definitions \"/etc/rabbitmq/definitions.json\""
    volumes:
      - ./rabbitmq-definitions.json:/etc/rabbitmq/definitions.json:ro
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  gateway:
    container_name: gateway
    build:
      context: ./backend/gateway
    ports:
      - "3000:3000"
    environment:
      JWT_SECRET: FzQ7U1aZ+zU5rLJ9cW4qEKe45Ihv8+6BqZVh4TcI1xQ=
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672
    depends_on:
      rabbitmq:
        condition: service_healthy
      auth-api:
        condition: service_started
    networks:
      - default

  clients-db:
    container_name: clients-db
    image: postgres:15
    ports:
      - "5438:5432"
    environment:
      POSTGRES_DB: clients
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - clients-data:/var/lib/postgresql/data 
    networks:
      - default

  clients:
    container_name: clients
    build:
      context: ./backend/clients
    ports:
      - "5001:5001"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://clients-db:5432/clients
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
    depends_on:
      - clients-db
      - gateway
      - rabbitmq
    networks:
      - default
  
  # Banco de dados do serviço de reservas (Booking Command)
  booking-command-db:
    image: postgres:16
    container_name: booking_command_postgres
    environment:
      POSTGRES_DB: bookingdb_command
      POSTGRES_USER: bookinguser
      POSTGRES_PASSWORD: bookingpass
    ports:
      - "5436:5432"
    volumes:
      - ./backend/BookingService/init-command.sql:/docker-entrypoint-initdb.d/init-command.sql
    networks:
      - default

  # Banco de dados do serviço de reservas (Booking Query)
  booking-query-db:
    image: postgres:16
    container_name: booking_query_postgres
    environment:
      POSTGRES_DB: bookingdb_query
      POSTGRES_USER: bookinguser
      POSTGRES_PASSWORD: bookingpass
    ports:
      - "5437:5432"
    volumes:
      - ./backend/BookingService/init-query.sql:/docker-entrypoint-initdb.d/init-query.sql
    networks:
      - default

  # Banco de dados do serviço de voos
  flight-db:
    image: postgres:16
    container_name: flight_postgres
    environment:
      POSTGRES_DB: flightdb
      POSTGRES_USER: flightuser
      POSTGRES_PASSWORD: flightpass
    ports:
      - "5434:5432"
    volumes:
      - ./backend/FlightService/flight/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - default

  # Banco de dados do serviço de funcionários
  employee-db:
    image: postgres:16
    container_name: employee_postgres
    environment:
      POSTGRES_DB: employeedb
      POSTGRES_USER: employeeuser
      POSTGRES_PASSWORD: employeepass
    ports:
      - "5435:5432"
    volumes:
      - ./backend/EmployeeService/ProjetoFuncionario/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - default

  # Serviço de reservas (Command)
  booking-command-service:
    build: ./backend/BookingService/bookingcommand
    container_name: booking_command_service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://booking-command-db:5432/bookingdb_command
      SPRING_DATASOURCE_USERNAME: bookinguser
      SPRING_DATASOURCE_PASSWORD: bookingpass
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
    ports:
      - "5004:5004"
    depends_on:
      - booking-command-db
      - rabbitmq
    networks:
      - default

  # Serviço de reservas (Query)
  booking-query-service:
    build: ./backend/BookingService/bookingquery
    container_name: booking_query_service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://booking-query-db:5432/bookingdb_query
      SPRING_DATASOURCE_USERNAME: bookinguser
      SPRING_DATASOURCE_PASSWORD: bookingpass
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
    ports:
      - "5006:5006"
    depends_on:
      - booking-query-db
      - rabbitmq
    networks:
      - default

  # Serviço de voos
  flight-service:
    build: ./backend/FlightService/flight
    container_name: flight_service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://flight-db:5432/flightdb
      SPRING_DATASOURCE_USERNAME: flightuser
      SPRING_DATASOURCE_PASSWORD: flightpass
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
    ports:
      - "5003:5003"
    depends_on:
      - flight-db
      - rabbitmq
    networks:
      - default

  # Serviço de funcionários
  employee-service:
    build: ./backend/EmployeeService/ProjetoFuncionario
    container_name: employee_service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://employee-db:5432/employeedb
      SPRING_DATASOURCE_USERNAME: employeeuser
      SPRING_DATASOURCE_PASSWORD: employeepass
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
    ports:
      - "5002:5002"
    depends_on:
      - employee-db
      - rabbitmq
    networks:
      - default

  # Orchestrator Saga
  orchestrator:
    build: ./backend/OrchestratorService/orchestrator
    container_name: orchestrator
    environment:
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
    ports:
      - "5005:5005"
    depends_on:
      - rabbitmq
    networks:
      - default
  
volumes:
  mongo-data:
  clients-data:


